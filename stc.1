.\" Automatically generated by Pandoc 2.2.3.2
.\"
.TH "stc" "1" "" "" ""
.hy
.SH NAME
.PP
stc \- Stellar transaction compiler
.SH SYNOPSIS
.PP
stc [\-net=\f[I]id\f[]] [\-sign] [\-c] [\-l] [\-u] [\-i | \-o FILE]
\f[I]input\-file\f[]
.PD 0
.P
.PD
stc \-edit [\-net=ID] \f[I]file\f[]
.PD 0
.P
.PD
stc \-post [\-net=ID] \f[I]input\-file\f[]
.PD 0
.P
.PD
stc \-preauth [\-net=ID] \f[I]input\-file\f[]
.PD 0
.P
.PD
stc \-txhash [\-net=ID] \f[I]input\-file\f[]
.PD 0
.P
.PD
stc \-keygen [\f[I]name\f[]]
.PD 0
.P
.PD
stc \-sec2pub [\f[I]name\f[]]
.PD 0
.P
.PD
stc \-import\-key \f[I]name\f[]
.PD 0
.P
.PD
stc \-export\-key \f[I]name\f[]
.PD 0
.P
.PD
stc \-list\-keys
.SH DESCRIPTION
.PP
The Stellar transaction compiler, stc, is a command\-line tool for
creating, viewing, editing, signing, and posting Stellar network
transactions.
It is intended for use by scripts or for creating test transactions
without the ambiguity of higher\-layer wallet abstractions.
stc is also useful in non\-graphical environments, such as a
single\-board computer used for cold storage.
.PP
The tool runs in one of several modes.
The default mode processes a transaction in a single shot, optionally
updating the sequence numbers and fees, translating the transaction
to/from human\-readable form, or signing it.
In edit mode, stc repeatedly invokes a text editor to allow somewhat
interactive editing of transactions.
In hash mode, stc hashes a transactions to facilitate creation of
pre\-signed transactions or lookup of transaction results.
In post mode, stc posts a transaction to the network.
Finally, key management mode allows one to maintain a set of signing
keys.
.SS Default mode
.PP
The default mode parses a transaction (in either textual or
base64\-encoded binary), and then outputs it.
The input comes from a file specified on the command line, or from
standard input of the argument is \[lq]\f[C]\-\f[]\[rq].
By default, stc outputs transactions in the human\-readable
\f[I]txrep\f[] format, specified by SEP\-0011.
With the \f[C]\-c\f[] flag, stc outputs base64\-encoded binary XDR
format.
Various options modify the transaction as it is being processed, notably
\f[C]\-sign\f[], \f[C]\-key\f[] (which implies \f[C]\-sign\f[]), and
\f[C]\-u\f[].
.PP
Txrep format is automatically derived from the XDR specification of
\f[C]TransactionEnvelope\f[], with just a few special\-cased types.
The format is a series of lines of the form
\[lq]\f[C]Field\-Name:\ Value\ Comment\f[]\[rq].
The field name is the XDR field name, or one of two pseudo\-fields.
Pointers have a boolean pseudofield called \f[C]_present\f[] that is
true when the pointer is non\-null.
Variable\-length arrays have an integer pseudofield \f[C]len\f[]
specifying the array length.
There must be no space between a field name and the colon.
After the colon comes the value for that field.
Anything after the value is ignored.
stc sometimes places a comment there, such as when an account ID has
been configured to have a comment (see the FILES section below).
.PP
Two field types have specially formatted values:
.IP \[bu] 2
Account IDs and Signers are expressed using Stellar's \[lq]strkey\[rq]
format, which is a base32\-encoded format where public keys start with
\[lq]G\[rq], pre\-auth transaction hashes start with \[lq]T\[rq], and
hash\-X signers start with \[lq]X\[rq].
(Private keys start with \[lq]S\[rq] in strkey format, but never appear
in transactions.)
.IP \[bu] 2
Asset codes are formatted as printable ASCII bytes and two\-byte hex
escapes (e.g., \f[C]\\x1f\f[]), with no surrounding quotes.
Backslash must be escaped with itself (e.g., \f[C]\\\\\f[]).
.PP
Note that txrep is more likely to change than the base\-64 XDR encoding
of transactions.
Hence, if you want to preserve transactions that you can later read or
re\-use, compile them with \f[C]\-c\f[].
XDR is also compatible with other tools.
Notably, you can examine the contents of an XDR transaction with
\f[C]stellar\-core\f[] itself, using the command
\[lq]\f[C]stellar\-core\ \-\-base64\ \-\-printxdr\ FILE\f[]\[rq], or by
using the web\-based Stellar XDR viewer at
<https://www.stellar.org/laboratory/#xdr-viewer>.
You can also sign XDR transactions with \f[C]stellar\-core\f[], using
\[lq]\f[C]stellar\-core\ \-\-base64\ \-\-signtxn\f[]\[rq].
.SS Edit mode
.PP
Edit mode is selected whenever stc is invoked with the \f[C]\-edit\f[]
flag.
In this mode, whether the transaction is originally in base64 binary or
text, it is output in text format to a temporary file, and your editor
is repeatedly invoked to edit the file.
In this way, you can change union discriminant values or array sizes,
quit the editor, and automatically re\-enter the editor with any new
fields appropriately populated.
.PP
Note that for enum fields, if you add a question mark (\[lq]?\[rq]) to
the end of the line, stc will populate the line with a comment
containing all possible values.
This is handy if you forget the various options to a union discriminant
such as the operation type.
.PP
Edit mode terminates when you quit the editor without modifying the
file, at which point stc writes the transaction back to the original
file.
.SS Post mode
.PP
Post\-mode submits a transaction to the Stellar network.
This is how you actually execute a transaction you have properly
formatted and signed.
.SS Hash mode
.PP
Stellar hashes transactions to a unique 32\-byte value that depends on
the network identification string.
A transaction's hash, in hex format, can be used to query horizon for
the results of the transaction after it executes.
With the option \f[C]\-txhash\f[], stc hashes transaction and outputs
this hex value.
.PP
Stellar also allows an account to be configured to allow a
pre\-authorized transaction to have a specific signing weight.
These pre\-authorized transactions use the same network\-dependent hash
values as computed by \f[C]\-txhash\f[].
However, to include such a hash as an account signer, it must be encoded
in strkey format starting with the letter \[lq]T\[rq].
Running stc with the \f[C]\-preauth\f[] flag prints this strkey\-format
hash to standard output.
.PP
Great care must be taken when creating a pre\-authorized transaction, as
any mistake will cause the transaction not to run.
In particular, make sure you have set the sequence number to one more
than it will be at the time you run the transaction, not one more than
it is currently.
(If the transaction adding the pre\-authorized transaction as a signer
uses the same source account, it will consume a sequence number.) You
should also make sure the transaction fee is high enough.
You may wish to increase the fee above what is currently required in
case the fee has increased at the time you need to execute the
pre\-authorized transaction.
.PP
Another potential source of error is that the pre\-authorized
transaction hash depends on the network name, so make absolutely sure
the \f[C]\-net\f[] option is correct when using \f[C]\-preauth\f[].
.SS Key management mode
.PP
stc runs in key management mode when one of the following flags is
selected: \f[C]\-keygen\f[], \f[C]\-sec2pub\f[], \f[C]\-import\-key\f[],
\f[C]\-export\-key\f[], and \f[C]\-list\-keys\f[].
.PP
These options take a key name.
If the key name contains a slash, it refers to a file in the file
system.
If the key name does not contain a slash, it refers to a file name in
the stc configuration directory (see FILES below).
This allows keys to be stored in the configuration directory and then
accessed from any directory in which stc runs.
.PP
The \f[C]\-keygen\f[] and \f[C]\-sec2pub\f[] options can be run with no
key name, in which case \f[C]\-keygen\f[] will output both the secret
and public key to standard output, and \f[C]\-sec2pub\f[] will read a
key from standard input or prompt for one to be pasted into the
terminal.
.PP
Keys are generally stored encrypted, but if you supply an empty
passphrase, they will be stored in plaintext.
If you use the \f[C]\-nopass\f[] option, stc will never prompt for a
passphrase and always assume you do not encrypt your private keys.
.SH OPTIONS
.TP
.B \f[C]\-c\f[]
Compile the output to base64 XDR binary.
Otherwise, the default is to output in text mode.
Only available in default mode.
.RS
.RE
.TP
.B \f[C]\-edit\f[]
Select edit mode.
.RS
.RE
.TP
.B \f[C]\-export\-key\f[]
Print a private key in strkey format to standard output.
.RS
.RE
.TP
.B \f[C]\-help\f[]
Print usage information.
.RS
.RE
.TP
.B \f[C]\-i\f[]
Edit in place\[em]overwrite the input file with the stc's output.
Only available in default mode.
.RS
.RE
.TP
.B \f[C]\-import\-key\f[]
Read a private key from the terminal (or standard input) and write it
(optionally encrypted) into a file (if the name has a slash) or into the
configuration directory.
.RS
.RE
.TP
.B \f[C]\-key\f[] \f[I]name\f[]
Specifies the name of a key to sign with.
Implies the \f[C]\-sign\f[] option.
Only available in default mode.
.RS
.RE
.TP
.B \f[C]\-l\f[]
Learn all signers associated with an account.
Queries horizon and stores the signers under the network's configuration
directory, so that it can verify signatures from all keys associated
with the account.
Only available in default mode.
.RS
.RE
.TP
.B \f[C]\-list\-keys\f[]
List all private keys stored under the configuration directory.
.RS
.RE
.TP
.B \f[C]\-net\f[] \f[I]name\f[]
Specify which network to use for hashing, signing, and posting
transactions, as well as for querying signers with the \f[C]\-l\f[]
option.
.RS
.RE
.TP
.B \f[C]\-nopass\f[]
Never prompt for a passphrase, so assume an empty passphrase anytime one
is required.
.RS
.RE
.TP
.B \f[C]\-o\f[] \f[I]file\f[]
Specify a file in which to write the output.
The default is to send the transaction to standard output unless
\f[C]\-i\f[] has been supplied.
\f[C]\-i\f[] and \f[C]\-o\f[] are mutually exclusive, and can only be
used in default mode.
.RS
.RE
.TP
.B \f[C]\-sec2pub\f[]
Print the public key corresponding to a particular private key.
.RS
.RE
.TP
.B \f[C]\-sign\f[]
Sign the transaction.
If no \f[C]\-key\f[] option is specified, it will prompt for the private
key on the terminal (or read it from standard input if standard input is
not a terminal).
.RS
.RE
.TP
.B \f[C]\-u\f[]
Query the network to update the fee and sequence number.
The fee depends on the number of operations, so be sure to re\-run this
if you change the number of transactions.
Only available in default mode.
.RS
.RE
.SH EXAMPLES
.TP
.B \f[C]stc\ trans\f[]
Reads a transaction from a file called \f[C]trans\f[] and prints it to
standard output in human\-readable form.
.RS
.RE
.TP
.B \f[C]stc\ \-edit\ trans\f[]
Run the editor on the text format of the transaction in file
\f[C]trans\f[] (which can be either text or base64 XDR, or not exist yet
in which case it will be created in XDR format).
Keep editing the file until the editor quits without making any changes.
.RS
.RE
.TP
.B \f[C]stc\ \-c\ \-i\ \-key\ mykey\ trans\f[]
Reads a transaction in file \f[C]trans\f[], signs it using key
\f[C]mykey\f[], then overwrite the \f[C]trans\f[] file with the signed
transaction in base64 format.
.RS
.RE
.TP
.B \f[C]stc\ \-post\ trans\f[]
Posts a transaction in file \f[C]trans\f[] to the network.
The transaction must previously have been signed.
.RS
.RE
.TP
.B \f[C]stc\ \-keygen\f[]
Generate a new private/public key pair and print them both to standard
output, one per line (private key first).
.RS
.RE
.TP
.B \f[C]stc\ \-keygen\ mykey\f[]
Generate a new private/public key pair.
Prompt for a passphrase.
Print the public key to standard output.
Write the private key to \f[C]$HOME/.config/stc/keys/mykey\f[] encrypted
with the passphrase.
.RS
.RE
.SH ENVIRONMENT
.TP
.B EDITOR
Name of editor to invoke with the \f[C]\-edit\f[] argument (default:
\f[C]vi\f[])
.RS
.RE
.TP
.B STCDIR
Directory containing all the configuration files (default:
\f[C]$XDG_CONFIG_HOME/stc\f[] or \f[C]$HOME/.config/stc\f[])
.RS
.RE
.TP
.B STCNET
Name of network to use by default if not overridden by \f[C]\-net\f[]
argument (default: \f[C]default\f[])
.RS
.RE
.SH FILES
.PP
All configuration files reside in a configuration directory:
\f[C]$STCDIR\f[] if that environment variable exists,
\f[C]$XDG_CONFIG_HOME/stc\f[] if that environment variable exists, and
otherwise \f[C]$HOME/.config/stc\f[].
Within the configuration directory are two subdirectories: \f[C]keys\f[]
and \f[C]networks\f[].
.PP
Each file in \f[C]keys\f[] contains a signing key, which is either a
single line of text representing a Stellar signing key in strkey format
(starting with the letter \[lq]S\[rq]), or such a line of text
symmetrically encrypted and ASCII armored by gpg.
These are the key names supplied to options such as \f[C]\-key\f[] and
\f[C]\-export\-key\f[].
.PP
Within the \f[C]networks\f[] directory are a bunch of subdirectories
whose names correspond to the \f[I]id\f[] argument to the \f[C]\-net\f[]
option.
Within each subdirectory of \f[C]networks\f[] there are four files:
.IP \[bu] 2
\f[C]network_id\f[] corresponds to the Stellar network ID that permutes
signatures and pre\-signed\-transaction hashes (which prevents
signatures from being valid on more than one instantiation of the
Stellar network).
stc by default populates these files correctly for the main public
Stellar network and test networks.
You probably shouldn't edit these files, but may wish to create new ones
if you instantiate your own networks using the Stellar code base.
.IP \[bu] 2
\f[C]horizon\f[] corresponds to the base URL of the horizon instance to
use for this network.
You may wish to change this URL to use your own local validator if you
are running one, or else that of an exchange that you trust.
Note that the URL \f[I]must\f[] end with a \f[C]/\f[] (slash) character.
.IP \[bu] 2
\f[C]accounts\f[] assigns comments to accounts, so that you don't have
to remember account names when proofreading transactions.
The file is not created by default.
The format is simply a bunch of lines each of the form
\f[C]AccountID\ comment\f[].
.IP \[bu] 2
\f[C]signers\f[] remembers public signing keys and optionally assigns
comments to them, so that stc can check the signatures in transactions
it is processing.
This file can be populated by default by running the \f[C]\-l\f[] flag
on a transaction (which queries horizon for additional signers beyond
the master key).
You can also edit this file by hand to add comments to individual
signers, which is particularly useful in the case of a multi\-sig wallet
where you want to see who has signed a transaction already.
.SH SEE ALSO
.PP
stellar\-core(1), gpg(1)
.PP
The Stellar web site: <https://www.stellar.org/>
.PP
Stellar's web\-based XDR viewer:
.PD 0
.P
.PD
<https://www.stellar.org/laboratory/#xdr-viewer>
.PP
SEP\-0011, the specification for txrep format:
.PD 0
.P
.PD
<https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0011.md>
.PP
RFC4506, the specification for XDR:
.PD 0
.P
.PD
<https://tools.ietf.org/html/rfc4506>
.PP
The XDR definition of a \f[C]TransactionEnvelope\f[]:
.PD 0
.P
.PD
<https://github.com/stellar/stellar-core/blob/master/src/xdr/Stellar-transaction.x>
.SH BUGS
.PP
stc accepts and generates any \f[C]TransactionEnvelope\f[] that is valid
according to the XDR specification.
However, a \f[C]TransactionEnvelope\f[] that is syntactically valid XDR
may not be a valid Stellar transaction.
stellar\-core imposes additional restrictions on transactions, such as
prohibiting non\-ASCII characters in certain string fields.
This fact is important to keep in mind when using stc to examine
pre\-signed transactions: what looks like a valid, signed transaction
may not actually be valid.
.PP
stc uses a potentially imperfect heuristic to decide whether a file
contains a base64\-encoded binary transaction or a textual one.
.PP
stc can only encrypt secret keys with symmetric encryption.
However, the \f[C]\-sign\f[] option will read a key from standard input,
so you can always run
\f[C]gpg\ \-d\ keyfile.pgp\ |\ stc\ \-sign\ \-i\ txfile\f[] to sign the
transaction in \f[C]txfile\f[] with a public\-key\-encrypted signature
key in \f[C]keyfile.pgp\f[].
.PP
Various forms of malformed textual input will surely cause stc to panic,
though the binary parser should be pretty robust.
.SH AUTHORS
David Mazieres.
